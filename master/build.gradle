/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.7.1/samples
 */

// plugins {
//     id 'org.springframework.boot' version '2.3.2.RELEASE'
// }

plugins {
    id 'checkstyle'
    id 'com.github.spotbugs' version '4.5.0'
}

ext {
    defaultEncoding = 'UTF-8'
    eclipseConf = System.getenv('GRADLE_ECLIPSE_CONF')
    eclipseFormatterXml = getProperty('eclipse.formatter_xml')
    eclipseFormatterProfile = getProperty('eclipse.formatter_profile')
    eclipseFormatterSettingsVersion = getProperty('eclipse.formatter_settings_version')
    eclipseCheckstyleXml = getProperty('eclipse.checkstyle_xml')

    // TODO: have not to specified version because of BOM.
    versions = [
        'springboot': '2.3.3.RELEASE',
        'mybatis': '2.1.3'
    ]
}

allprojects {
    apply plugin: 'eclipse'

    eclipse.project {
        buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
        natures 'org.eclipse.buildship.core.gradleprojectnature'
    }

    // task cleanEclipse
    tasks.cleanEclipse.doLast {
        project.delete('.settings')
        project.delete('.checkstyle', "${eclipseCheckstyleXml}")
    }

    // task eclipse
    tasks.eclipse.doLast {
        def settingsDir = new File('.settings')
        settingsDir.mkdirs()
        File buildship_prefs = file(".settings/org.eclipse.buildship.core.prefs")
        buildship_prefs.append('''
            connection.project.dir=
            eclipse.preferences.version=1
            '''. stripIndent())
    }

}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    // apply plugin: 'com.github.spotbugs'

    // apply plugin: 'io.spring.dependency-management'
    // // apply plugin: 'eclipse-wtp'
    // // apply plugin: 'checkstyle'
    // dependencyManagement {
    //     imports {
    //         mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    //     }



    repositories {
        jcenter()
        mavenCentral()
    }

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    tasks.withType(AbstractCompile)*.options*.encoding = defaultEncoding
    tasks.withType(GroovyCompile)*.groovyOptions*.encoding = defaultEncoding

    tasks.withType(Test) {
        testLogging {
            exceptionFormat = 'full'
            showCauses true
            showExceptions true
            showStackTraces true
            showStandardStreams true
        }
    }

    eclipse {
        project {
            buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
            natures 'net.sf.eclipsecs.core.CheckstyleNature'

            buildCommand 'edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder'
            natures 'edu.umd.cs.findbugs.plugin.eclipse.findbugsNature'
        }
        jdt.file {
            withProperties { properties ->
                def formatter = new XmlSlurper().parse("${eclipseConf}/formatter/${eclipseFormatterXml}")
                formatter.profile.setting.each {
                    properties.put(it.@id as String, it.@value as String)
                }
            }
        }
    }

    tasks.eclipse.doLast {
        // formatter
        File ui_prefs = file(".settings/org.eclipse.jdt.ui.prefs")
        ui_prefs.append("""
            eclipse.preferences.version=1
            formatter_profile=${eclipseFormatterProfile}
            formatter_settings_version=${eclipseFormatterSettingsVersion}
        """.stripIndent())

        // checkstyle
        copy {
            from "${eclipseConf}/checkstyle/dot.checkstyle"
            into '.'
            rename(/dot\.checkstyle/, '.checkstyle')
        }
        copy {
            from "${eclipseConf}/checkstyle/${eclipseCheckstyleXml}"
            into '.'
        }
    }

    dependencies {
        implementation 'org.projectlombok:lombok:1.18.16'
        annotationProcessor 'org.projectlombok:lombok:1.18.16'
        testImplementation 'org.projectlombok:lombok:1.18.16'
        // testImplementation 'junit:junit:4.13'
    }

    checkstyle {
        toolVersion = '8.34'
        configFile = file("${eclipseConf}/checkstyle/${eclipseCheckstyleXml}")
        ignoreFailures = true
        showViolations = true
        reportsDir = file("$project.buildDir/reports/checkstyle/")
    }
    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }

    // spotbugs {
    //     toolVersion = '4.5.0'
    //     ignoreFailures = true
    // }
    // tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    //     reports.xml.enabled = false
    //     reports.html.enabled = true
    // }

}
